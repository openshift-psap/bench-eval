#!/usr/bin/env python3
# -*- mode: python; indent-tabs-mode: nil; python-indent-level: 4 -*-
# vim: autoindent tabstop=4 shiftwidth=4 expandtab softtabstop=4 filetype=python

import sys
import json
from dataclasses import dataclass, is_dataclass, asdict
from enum import Enum
from typing import Dict, List, Any, Optional, Tuple
from functools import reduce

def to_dict(a: Any):
    if hasattr(a, "to_dict"):
        return a.to_dict()
    elif is_dataclass(a):
        return asdict(a)
    else:
        raise TypeError(f"Cannot bring {a} to a dict")

def json_lookup(d: Dict[Any, Any], path: str, delim: str=".") -> Optional[Any]:
    try:
        segments = path.split(delim)
        return reduce(lambda td, seg: td[seg], segments, d)
    except KeyError:
        return None

def parse_percentiles(d: Dict[Any, Any], path: str, name_prefix=None) -> Optional[List[Tuple[str, float]]]:
    if name_prefix is None:
        name_prefix = path + "_"
    percentiles_list = json_lookup(d, path)
    if percentiles_list is None:
        return None
    else:
        return [(name_prefix + k, v) for k, v in d.items()]

"""
The following enums and dataclasses are datastructures
to represent various pieces of how Crucible expects to
find data. These are not specific to bench-llm, but are
structures to help us model what the output of the
post-processing needs to look like.
"""

class MetricClass(Enum):
    COUNT = "count"
    THROUGHPUT = "throughput"

@dataclass
class Desc:
    metric_class: MetricClass
    source: str
    metric_type: str

    def to_dict(self):
        return {
                "class": str(self.metric_class.value),
                "source": self.source,
                "type": self.metric_type,
            }
@dataclass
class Metric:
    idx: int
    desc: Desc
    names: Dict[str, str]

    def to_dict(self):
        return {
                "desc": to_dict(self.desc),
                "idx": self.idx,
                "names": self.names,
            }

@dataclass
class Period:
    name: str
    metric_files: List[str]

    def to_dict(self):
        return {
                "name": self.name,
                "metric-files": self.metric_files,
            }

@dataclass
class PostProcess:
    primary_period: str
    primary_metric: str
    benchmark: str
    periods: List[Period]
    rickshaw_bench_metric_version: str

    def to_dict(self):
        return {
                "primary-period": self.primary_period,
                "primary-metric": self.primary_metric,
                "benchmark": self.benchmark,
                "periods": [to_dict(period) for period in self.periods],
                "rickshaw-bench-metric": {
                    "schema": {
                        "version": self.rickshaw_bench_metric_version
                    }
                }
            }

@dataclass
class Entry:
    idx: int
    start: int
    end: int
    value: float

    def __str__(self):
        return f"{int(self.idx)},{int(self.start)},{int(self.end)},{float(self.value)}"


def main():

    # Do nothing :)

    return 0


if __name__ == "__main__":
    sys.exit(main())
