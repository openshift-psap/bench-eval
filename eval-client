#!/bin/python3

import sys

# Do this immediately to log as much of the execution as possible
fp_out = open("client_stdout.txt", "w")
fp_err = open("client_stderr.txt", "w")
sys.stdout = fp_out
sys.stderr = fp_err

import argparse
import subprocess
from typing import List, Literal, Optional, TypeAlias, Union, get_origin, get_args
from dataclasses import asdict, dataclass, fields, MISSING
from enum import Enum
import json

DEPENDENCIES = ["llm-eval-test", "huggingface-cli"]

def is_optional(field_t):
    return get_origin(field_t) is Optional or (get_origin(field_t) is Union and type(None) in get_args(field_t))

@dataclass
class CmdResult:
    rc: int
    stdout: Optional[str]
    stderr: Optional[str]

class DataType(Enum):
    EMULATED = "emulated"
    FILE = "file"
    TRANSFORMERS = "transformers"

    def __str__(self):
        return self.value


class BackendEngine(Enum):
    OPENAI_HTTP = "openai_http"

    def __str__(self):
        return self.value

class LogLevel(Enum):
    ERROR = "q"
    DEBUG = "v"

    def __str__(self):
        return self.value

MaxRequests: TypeAlias = Union[int, Literal["dataset"]]

@dataclass
class Params:
    eval_run_endpoint: str
    eval_run_model: str
    eval_run_tokenizer: str
    eval_run_tasks: str
    eval_run_batch_size: Optional[int]
    eval_run_catalog_path: Optional[str]
    eval_run_tasks_path: Optional[str]
    eval_run_datasets: str = "/root/datasets"
    eval_run_output: str = "output.json"
    eval_run_loglevel: LogLevel = LogLevel.ERROR

def run(cmd: str, ignore_output=False, out_file=fp_out, err_file=fp_err) -> CmdResult:
    ran = subprocess.run(cmd, shell=True, stdout=(subprocess.DEVNULL if ignore_output else subprocess.PIPE), stderr=(subprocess.DEVNULL if ignore_output else subprocess.PIPE))
    result = CmdResult(
        ran.returncode,
        None if ignore_output else ran.stdout.decode("utf-8"),
        None if ignore_output else ran.stderr.decode("utf-8"),
    )
    if not ignore_output:
        out_file.write(str(result.stdout))
        err_file.write(str(result.stderr))
    return result

def main():

    # Ensure we have dependencies
    for name in DEPENDENCIES:
        ret = run(f"which {name}")
        if ret.rc != 0:
            print(f"Missing dependency: {name}")
            print(f"\t{ret.stderr}")
            return 1

    parser = argparse.ArgumentParser()

    for field in fields(Params):
        field_is_optional = is_optional(field.type) or field.default is not MISSING
        parser.add_argument(f"--{field.name}", type=field.type, default=field.default if field.default is not MISSING else None, required=not field_is_optional)

    args = parser.parse_args()
    vargs = vars(args)

    params: Params = Params(*[vargs[field.name] for field in fields(Params)])

    if params.eval_run_output != "output.json":
        print("Do not change name of output file, this is not supported")
        return 1
    if params.eval_run_datasets != "/root/datasets":
        print("Do not change name of the run datasets dir, this is not supported")
        return 1

    # Download tokenizer if you don't have it
    run(f"HF_TOKEN=$(cat /root/hf_token) huggingface-cli download {args.eval_run_tokenizer}")
    run("rm -f /root/hf_token")

    # Convert the Param fields to CLI calls

    # Run phase
    run_cli_args = []
    for field, value in asdict(params).items():
        if "eval_run" in field and value is not None:
            if type(value) is bool:
                if value:
                    run_cli_args.append(f"--{field.replace("eval_run_", "").replace("_", "-")}")
            if "loglevel" in field:
                run_cli_args.append(f"-{value}")
            else:
                run_cli_args.append(f"--{field.replace("eval_run_", "").replace("_", "-")}={value}")

    run_cmd = "llm-eval-test run " + " ".join(run_cli_args)
    print(f"Running: {run_cmd}")
    run(run_cmd)

    # Save all settings
    with open("params.json", "w") as f:
        f.write(json.dumps(vargs, indent=4, default=lambda x: x.value))

    return 0

if __name__ == "__main__":
    sys.exit(main())
